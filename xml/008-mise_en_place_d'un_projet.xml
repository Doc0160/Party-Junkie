<?xml version="1.0" encoding="UTF-8"?>
<div>
  <article>
    <h1>Explication</h1>
    <p>
      Pour obtenir une meilleure flexibilitée dans la compilation,
      ansi que de permettre l'utilisation d'un éditeur de code externe,
      mais aussi d'autres raisons
      <span class="mini">*cough* *cough* Vusial Studio Crash *cough* *cough*</span>,
      nous allons voir comment former notre prope environement de développement.
    </p>
    <p>
      Notez que c'est la façon dont <span class="gras">JE</span> le fais.<br/>
      Vous n'êtes pas obligé de tout suivre à la lettre.
    </p>
  </article>
  
  <article>
    <h1>Le faux disque dur</h1>
    <p>
      Le chemin vers un dique dur est très court: "C:/" ou encore "D:/".<br/>
      Un truc que j'aime faire c'est prendre le dossier dans lequel
      je vais faire mon développement et lui attribuer une lettre:<br/>
      pour celà existe la commande "subst":
      <img src="../img/set_up/subst.png" />
      Dans mon cas, ce sera subst W: "D:\Party Junkie".
    </p>
    <p>
      Pour ceux qui ne savent pas ouvrir une invite de commande:
      <ul>
        <li>Appuyer sur les touches: Windows+R</li>
        <li>Taper: cmd</li>
        <li>Appuyer sur Entrer</li>
        <li>????</li>
        <li>PROFIT!!!</li>
      </ul>
    </p>
  </article>
  
  <article>
    <h1>L'éditeur de code</h1>
    <p>
      Comme éditeur de code, je vais utiliser
      <a href="https://www.gnu.org/software/emacs/">Emacs</a>
      dont le fichier de configuration sera mis à disposition.<br/>
      Mais strictement rien ne vous empêche d'utiliser un autre éditeur,
      ou encore d'utiliser visual studio commme éditeur de code.
    </p>
    <p>
      //NOTE(doc):
      // mkdir misc
      // cp .emacs
    </p>
  </article>

  <article>
    <h1>Créer des dossiers</h1>
    <p>
      <pre class="prettyprint lang-batch">
        cd w:
        mkdir misc
        mkdir code
        mkdir build
        mkdir data
      </pre>
    </p>
    <p>
      //TODO(doc): fix google coloartion code to include batch
    </p>
  </article>
  
  <article>
    <h1>win32_party.cpp</h1>
    <p>
      Dans le dossier W:/code/, je crée un fichier "win32_party.cpp" contenant
      le code minimal pour faire un éxécutable.
      <pre class="prettyprint lang-cpp">
#include &lt;windows.h&gt;
int CALLBACK
WinMain(HINSTANCE Instance,
    HINSTANCE PrevInstance,
    LPSTR     CmdLine,
    int       CmdShow){
    return(0);
}
      </pre>
    </p>
    <p>
      //TODO(doc): fix google coloration code to include windows specific stuff
    </p>
  </article>

  <article>
    <h1>La compilation p1</h1>
    <p>
      La méthode que je vais présenter choque et horifie absoluement tous
      les dévelopeurs, et je m'en excuse.<br/>
      Mais vous savez quoi ? C'est comme ça que je build mes trucs et je ne vais
      pas changer de méthode.
    </p>
    <p>
      A la base de mon project je crée un "build.bat".
    </p>
    <img style="max-height: 100vh;" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/The_Scream.jpg/800px-The_Scream.jpg"/>
    <p>
      Un .bat est un fichier de script sous windows qui peut faire ce que
      l'invite de commande peut faire.
    </p>
    <p>
      Pour l'info, la plupart des développeurs utilise un make-system ou
      build-system, tel que
      <a href="https://www.gnu.org/software/make/">GNU make</a>,
      <a href="https://ninja-build.org/">Ninja</a> ou encore
      <a href="https://cmake.org/">CMake</a>.<br>
    </p>
    <p>
      <div class="two_column">
        <img style="height: 150px;" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/The_Scream.jpg/800px-The_Scream.jpg"/>
        <p>
          Et genéralement les développeurs aiment utiliser des outils de build,
          lançant des outils de build, lançant des outils de build,
          lançant des scripts, lançant d'autres outils de build; et avec tout ça
          des outils d'analyse d'outils de build pour lancer
          des outils d'optimisation des outils de build, ainsi que
          des outils d'optimisation d'outils d'optimisation des outils de build,
          et toute cette folie...
        </p>
      </div>
    </p>
    <p>
      <div class="two_column">
        <p>
          Et ils aiment ça.
        </p>
        <img style="height:50px;" src="https://i.ytimg.com/i/jJ3-Fs8wmfxZXAo4IK02mA/mq1.jpg?v=df668c"/>
      </div>
    </p>
    <p>
      La raison pour laquelle je ne le fais plus c'est que l'on
      fini par passer beaucoup de temps à parametrer ces outils,
      et beaucoup moins à programmer.<br/>
      La raison pour laquelle les programmeurs utilisent ce genre d'outils
      est de faire un sorte de compiler que les parities du code necessaire,
      et donc éviter de recompiler tout le projet (plus le projet est gros,
      plus il prend du temps à compiler).<br/>
      Mais, pour avoir compilé de gros projets (plus gros que ce que je vais
      faire dans cette projet (0.5 Go de code en C++)), compiler sans ces
      outils ne prends jamais plus de 5 secondes.
    </p>
  </article>
  
  <article>
    <h1>L'invite de commande</h1>
    <p>
      Le compilateur C++ de Microsoft est "cl.exe".<br/>
      Mais même après avoir installé Visual Studio, vous ne pourrez pas
      l'appeller depuis l'invite de commande.
      La raison pour laquelle vous ne pouvez pas l'apellé c'est
      que le chemin jusqu'à cet executable n'est pas dans la variable
      d'environement 'path' (vous pouvez taper "set" dans la cmd pour
      avoir la liste de ces variables d'environnement).
    </p>
    <p>
      Pour corriger ça (ainsi que mettre en place d'autres choses),
      l'équipe de développement de Visual Studio nous a déjà fait un .bat
      que l'on peut utilisé et qui a été téléchargé avec Visual Studio.<br/>
      Il se situe généralement à
      "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat".<br/>
      <span class="bold" style="color: red;">Verifiez bien que ce fichier existe.</span><br/>
      En batch (le language de scripting de la cmd), call permet d'appeler
      un autre .bat.
    </p>
    <p>
      Pour éviter de devoir relancer vcvarsall.bat plusieurs fois,
      on va créer un shell.bat (à la racine de notre projet)
      qui s'occupera de celà ainsi que tout ce qu'on voudra éxécuter avant
      de commencer notre session de programmation.
    </p>
    <pre class="prettyprint lang-batch">
      @echo off
      subst W: "D:\Party Junkie"
      call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64
      set path=W:\misc\;%path%
    </pre>
    <p>
      Le "x64" spécifie à vcvarsall.bat de tout mettre en place pour une compilation
      en 64bits ("x86 spécifie une compilation 32bits).<br/>
      On en profite pour modifier la variable "path" pour y ajouter notre dossier,
      au cas où l'on voudrais y ajouter nous outils, etc.
    </p>
    <p>
      Pour aller un pas plus loin, on va créer un racourci lançant notre invite de
      commande déjà toute prête à être utilisée:
      <ul>
        <li>Click droit</li>
        <li>Nouveau racourci</li>
        <li>%windir%\system32\cmd.exe /k W:\misc\shell.bat</li>
      </ul>
      Voilà !
    </p>
    <p>
      Maintenant, si voys double clickez sur ce racourci,
      une invite de commande va s'ouvrir.<br/>
      Tapez "cl".<br/>
      Miracle, on peut appeler le compilateur !
    </p>
  </article>

  <article>
    <h1>L'editeur</h1>
    <p>
      Dans le dossier W:/misc, je vais créer un "emacs.bat" qui lancera
      mon éditeur de code (Emacs), cette étape est optinionelle.
      <pre class="prettyprint lang-batch">
        @echo off
        D:\emacs\bin\runemacs.exe -q -l W:\misc\.emacs
      </pre>
    </p>
  </article>

  <article>
    <h1>Le debugeur</h1>
    <p>
      Nous avons de la chance, vcvarsall.bat met un certain nombre de choses
      en place pour nous faciliter l'utilisation des outils de développement.<br/>
      Taper "devenv" permet de lancer Visual studio.<br/>
      Taper "devenv un_executable.exe" (ou un_executable.exe est le chemin d'un
      vrai fichier .exe) lance VS déjà prêt à débuger cet executable.
    </p>
  </article>
  
  <article>
    <h1>La compilation p2</h1>
    <p>
      Nous pouvons revenir sur notre build.bat.<br/>
    </p>
    <p>
      La premiére ligne de ce build.bat est la suivante:
    </p>
    <pre class="prettyprint lang-batch">
      @echo off
      mkdir ..\build
      pushd ..\build
      cl ..\code\win32_party.cpp
      popd
    </pre>
    <p>
      "echo off" dis à la cmd de ne pas afficher la commande avant de
      l'éxécuter; et le @ avant de ne pas afficher "echo off" avant de l'éxécuter.
    </p>
    <p>
      "mkdir" permet de créer un dossier.<br/>
      "pushd" permet de se déplacer dans un dossier de façon à pouvoir revenir
      au dossier où l'on était à l'origine avec "popd".
    </p>
    <p>
      Ce fichier "build.bat" va être la seule et unique façon dont on va compiler
      notre programme.<br/>
      Ce fichier va surement évoluer au fur et à meusure, mais ne sera jamais plus
      compliqué que ce qu'il est actuellement.
    </p>
  </article>

  <article>
    <h1>La compilation p3</h1>
    <p>
      En parlant d'évolution, la toute premiére évolution va être de rajouter
      le switch Zi qui permet d'activer la génération d'info pour le débeugeur
      de VS.
    </p>
      <pre class="prettyprint lang-batch">
      @echo off
      mkdir ..\build
      pushd ..\build
      cl -Zi ..\code\win32_party.cpp
      popd
      </pre>
      <p>
      A ce niveau, nous pouvons compiler(taper build).<br/>
      Et taper "devenv win32_party.exe" pour lancer le débugeur.
    </p>
    <p>
      Visual Studio ce lance avec comme seul objet dans l'explorateur de solution
      notre .exe.
      <img src="../img/set_up/devenv.png" />
      Click droit "Propriétés".<br/>
      Modifiez "Répertoire de travail" pour pointer vers "W:\data\".
      <img src="../img/set_up/devenv1.png" />
    </p>
  </article>
</div>
