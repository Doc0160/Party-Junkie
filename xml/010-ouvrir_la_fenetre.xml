<?xml version="1.0" encoding="UTF-8"?>
<div>
  <article>
    <h1>Ouvrir une fenétre: la bureaucratie française</h1>
    <p>
      Pour pouvoir ouvrir une fenétre, il faut d'abord l'"enregistrer" avec
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms633586(v=vs.85).aspx">RegisterClass</a>.<br/>
      RegisterClass demande de remplir une structure
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms633576(v=vs.85).aspx">WNDCLASS</a>
      pour faire son job.
    </p>
    <p>
      Donc, pour initialiser une variable WNDCLASS, et initialiser tous ces
      champs à 0:
    </p>
    <pre class="prettyprint lang-cpp">
      WNDCLASS WindowClass = {0};
    </pre>
    <p>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ff729176(v=vs.85).aspx">Window Class Styles</a>
    </p>
    <pre class="prettyprint lang-cpp">
      //TODO(doc): check if CS_OWNDC|CS_HREDRAW|CS_VREDRAW still matter
      WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
    </pre>
    <p>
      Le champs "lpfnWndProc" sera abordé dans la prochaine section.
    </p>
    <pre class="prettyprint lang-cpp">
      WindowClass.lpfnWndProc = ;
    </pre>
    <p>
      Pour notre programme nous n'avons par besoin
      de réserver plus de mémoire pour la WNDCLASS (cbClsExtra & cbWndExtra).
    </p>
    <p>
      On va commencer par les champs qu'on connais: le champs hInstance.<br/>
      L'instance de notre programme nous ai passé dans notre WinMain
    </p>
    <pre class="prettyprint lang-cpp">
      WindowClass.hInstance = Instance;
    </pre>
    <p>
      Il est toujours possible de récupérer l'instance de son programme de
      n'importe où avec
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms683199(v=vs.85).aspx">GetModuleHndle(0);</a>
    </p>
    <p>
      Pour notre programme nous n'avons par besoin (pour l'instant) de
      définir une icone (hIcon), un curseur (hCursor), ni même
      de définir une couleur de fond pour notre fenétre (hbrBackground).
    </p>
    <p>
      Nous n'aurons pas non plus de "Menu" (Fichiers, Edition, ...)
      (lpszMenuName).
    </p>
    <pre class="prettyprint lang-cpp">
      WindowClass.lpszClassName = "RainbowCreatorWindowClass";
    </pre>
    <P>
      Après tout ça, il faut appeller "RegisterClass" en lui
      passant notre structure.
    </p>
    <pre class="prettyprint lang-cpp">
      WNDCLASS WindowClass = {0};
      WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
      WindowClass.lpfnWndProc = ; //TODO(doc): explain what to add here
      WindowClass.hInstance = Instance;
      //NOTE(doc): not PJ's window class name
      WindowClass.lpszClassName = "RainbowCreatorWindowClass";
    </pre>
  </article>
  <article>
    <h1>CALLBACK WindowProc: Il vous manque des papiers</h1>
    <p>
      "Window Procedure" est une fonction qui
      va recevoir tous les messages venant de windows.<br/>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms633573(v=vs.85).aspx">WindowProc</a>
    </p>
    <p>
      Cette documentation définit la signature de la fonction:
      le nom de la fonction et le nom des paramétres ne sont pas important
      pour former un WindowProc valide.<br/>
      On va donc rajouter sa définition:
    </p>
    <pre class="prettyprint lang-cpp">
      LRESULT CALLBACK
      MainWindowCallback(HWND Window,
          UINT   Message,
          WPARAM WParam,
          LPARAM LParam)
      {
          //TODO(doc): add smoething here;
      }
    </pre>
    <p>
      Et nous pouvons compléter lpfnWndProc.
    </p>
    <pre class="prettyprint lang-cpp">
      WNDCLASS WindowClass = {0};
      WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
      WindowClass.lpfnWndProc = MainWindowCallback;
      WindowClass.hInstance = Instance;
      WindowClass.lpszClassName = "RainbowCreatorWindowClass";
    </pre>
    <p>
      MainWindowCallback doit répondre aux messages que windows lui evoi
      pour que tout se passe bien et que windows sache que note fenétre
      est toujours active / [répond aux action de l'utilisateur] /
      [n'ai pas freezé].<br/>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms644927(v=vs.85).aspx#system_defined">Liste de tous les messages systeme existant</a>
    </p>
    <p>
      Les messages qui nous intéraissent là, tout de suite sont les
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ff468922(v=vs.85).aspx">Window Notifications</a>.
      
    </p>
    <pre class="prettyprint lang-cpp">
      LRESULT CALLBACK
      MainWindowCallback(HWND Window,
          UINT   Message,
          WPARAM WParam,
          LPARAM LParam)
      {
          LRESULT Result = 0;
          switch(Message){
      
          //NOTE(doc): when our windows is resized
          case WM_SIZE:{
              OutputDebugString("WM_SIZE\n");
          }break;
              
          //NOTE(doc): when windows "destroy" our window
          case WM_DESTROY:{
              OutputDebugString("WM_DESTROY\n");
          }break;
              
           //NOTE(doc): when the user click on the little red "X"
          case WM_CLOSE:{
              OutputDebugString("WM_CLOSE\n");
          }break;
              
          //NOTE(doc): when our windows gain or loses focus
          case WM_ACTIVATEAPP:{
              OutputDebugString("WM_ACTIVATEAPP\n");
          }break;
              
          //NOTE(doc): for every thing else
          default:{
              //NOTE(doc): call the default behaviour
              Result = DefWindowProc(Window, Message, WParam, LParam);
          }break;
              
          }
          return(Result);
      }
    </pre>
  </article>
  <article>
    <h1>ON VA ENFIN OUVRIR CETTE P**** DE FENETRE!!!!!</h1>
    <p>
      Maintenant que nous avons une struct WNDCLASS compléte, nous pouvons
      la register:
    </p>
    <pre class="prettyprint lang-cpp">
      WNDCLASS WindowClass = {0};
      WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
      WindowClass.lpfnWndProc = MainWindowCallback;
      WindowClass.hInstance = Instance;
      WindowClass.lpszClassName = "RainbowCreatorWindowClass";

      if(RegisterClass(&WindowClass))
      {
          //TODO(doc): OPEN THE FREAKING WINDOW
      }
      else
      {
          MessageBox(0, "RegisterClass FAIL",
              "Party Junkie Rules", MB_OK|MB_ICONERROR);
      }
    </pre>
    <p>
      Pour ouvrir une fenétre sous windows, on utilise
      <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632680(v=vs.85).aspx">CreateWindowEx</a>.
    </p>
    <pre class="prettyprint lang-cpp">
      WNDCLASS WindowClass = {0};
      WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
      WindowClass.lpfnWndProc = MainWindowCallback;
      WindowClass.hInstance = Instance;
      WindowClass.lpszClassName = "RainbowCreatorWindowClass";

      if(RegisterClass(&WindowClass))
      {


CreateWindowEx(
  0, //NOTE(doc): we don't need any of this
  WindowClass.lpszClassName, //NOTE(doc): the window class name
  "Taste the Rainbow", //NOTE(doc): The actual window title
  WS_VISIBLE|WS_OVERLAPPEDWINDOW, //NOTE(doc): <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms632600(v=vs.85).aspx">WS_OVERLAPPEDWINDOW</a>
  CW_USEDEFAULT, // NOTE(doc): default x position
  CW_USEDEFAULT, // NOTE(doc): default y position
  CW_USEDEFAULT, // NOTE(doc): default width
  CW_USEDEFAULT, // NOTE(doc): default height
  hWndParent,
  hMenu,
  hInstance,
  lpParam
);


      
      }
      else
      {
          MessageBox(0, "RegisterClass FAIL",
              "Party Junkie Rules", MB_OK|MB_ICONERROR);
      }
    </pre>
  </article>
</div>
