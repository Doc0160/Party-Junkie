<?xml version="1.0" encoding="UTF-8"?>
<div>
  <article>
    <h1></h1>
    <p>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms646286(v=vs.85).aspx">WM_SYSKEYDOWN</a>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms646280(v=vs.85).aspx">WM_KEYDOWN</a>
      <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx">VK codes</a>
    </p>
    <pre class="prettyprint lang-cpp">
        case WM_SYSKEYDOWN:
        case WM_SYSKEYUP:
        case WM_KEYDOWN:
        case WM_KEYUP:
        {
            uint32 VKCode = WParam;
            switch(VKCode){
                case VK_TAB:
                {
                    OutputDebugStringA("TAB");
                } break;
                case 'W':
                {
                    OutputDebugStringA("W");
                } break;
                case 'D':
                {
                    OutputDebugStringA("D");
                } break;
            }
        }
    </pre>
  </article>
  <article>
    <h1>XInput</h1>
    <p>
      Pour capturer l'entree manette, nous allons utiliser XInput. J'ai chois
      XInput parmis les API pour manettes existante pour Windows car il
      est shippé avec l'OS depuis Windows XP (qui la version minimale que je me
      suis fixé) ainsi que sa grande compatibilité en termes de manettes
      prisent en charge.
    </p>
    <p>
      Les fonctions que l'on va utiliser sont dans une DLL externe que nous allons
      charger à l'éxécution. Donc nous allons préparer deux pointeurs de fonctions,
      ainsi que deux "stubs" (un module logiciel simulant la présence d'un autre),
      au cas où l'on arrive pas à charger cette DLL.
      <a href="https://en.wikipedia.org/wiki/Dynamic-link_library">DLL - Wikipedia</a>
    </p>
    <pre class="prettyprint lang-cpp">
#define X_INPUT_GET_STATE(name) DWORD name(DWORD dwUserIndex,XINPUT_STATE *pState)
typedef X_INPUT_GET_STATE(f_x_input_get_state);
X_INPUT_GET_STATE(XInputGetStateStub)
{
  return 0;
}
global_variable f_x_input_get_state *XInputGetState_ = XInputGetStateStub;
#define XInputGetState XInputGetState_

#define X_INPUT_SET_STATE(name) DWORD name(DWORD dwUserIndex, XINPUT_VIBRATION *pVibration)
typedef X_INPUT_SET_STATE(f_x_input_set_state);
X_INPUT_SET_STATE(XInputSetStateStub)
{
  return 0;
}
global_variable f_x_input_set_state *XInputSetState_ = XInputSetStateStub;
#define XInputSetState XInputSetState_
    </pre>
    <p>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/microsoft.directx_sdk.reference.xinputgetstate(v=vs.85).aspx">XInputGetState</a>
      <a href="https://msdn.microsoft.com/fr-fr/library/windows/desktop/microsoft.directx_sdk.reference.xinputsetstate(v=vs.85).aspx">XInputSetState</a>
    </p>
    <pre class="prettyprint lang-cpp">
internal void
Win32LoadXInput(void){
  HMODULE XInputLibrary = LoadLibraryA("xinput1_3.dll");
  if(XInputLibrary){
    XInputGetState = (f_x_input_get_state *) GetProcAddress(XInputLibrary,"XInputGetState");
    XInputSetState = (f_x_input_set_state *) GetProcAddress(XInputLibrary,"XInputSetState");
  }
}
    </pre>
    <pre class="prettyprint lang-cpp">
        // ...
                while(PeekMessage(&Message,WindowHandle,0,0, PM_REMOVE))
                {
                    // ....
                }
                
                // Poll message from controller
                for(DWORD ControllerIndex = 0;
                    ControllerIndex < XUSER_MAX_COUNT; ControllerIndex++)
                {
                    XINPUT_STATE ControllerState;
                    if(XInputGetState(ControllerIndex, &ControllerState)
                        == ERROR_SUCCESS)
                    {
                        XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;
                        bool Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);
                        bool Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);
                        bool Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);
                        bool Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);
                        bool Start = (Pad->wButtons & XINPUT_GAMEPAD_START);
                        bool Back = (Pad->wButtons & XINPUT_GAMEPAD_BACK);
                        bool LeftShoulder = (Pad->wButtons &
                            XINPUT_GAMEPAD_LEFT_SHOULDER);
                        bool RightShoulder = (Pad->wButtons &
                            XINPUT_GAMEPAD_RIGHT_SHOULDER);
                        bool AButton = (Pad->wButtons & XINPUT_GAMEPAD_A);
                        bool BButton = (Pad->wButtons & XINPUT_GAMEPAD_B);
                        bool XButton = (Pad->wButtons & XINPUT_GAMEPAD_X);
                        bool YButton = (Pad->wButtons & XINPUT_GAMEPAD_Y);
                        int16 StickX = Pad->sThumbLX;
                        int16 StickY = Pad->sThumbLY;
                    }
                    else
                    {
            
                    }
                }
                
                RenderWeirdGradient(GlobalBackbuffer, XOffset, YOffset);
        // ...
    </pre>
    <pre class="prettyprint lang-cpp"></pre>
    <pre class="prettyprint lang-cpp"></pre>
    <pre class="prettyprint lang-cpp"></pre>
  </article>
  <article>
    <a href="https://doc0160.github.io/Party-Junkie/ccode/test6/test6.cpp">test6.cpp</a>
    <img src="../img/tests/test6.gif"/>
  </article>
</div>
