<?xml version="1.0" encoding="UTF-8"?>
<div>
<article>
  <h1>Preprocesseur</h1>
  <p>
  Les préprocesseurs lexicaux sont les préprocesseurs de plus bas niveau, au sens où ils requièrent uniquement un mécanisme d'analyse lexicale. Ces préprocesseurs se contentent de procéder à des substitutions de chaînes de caractères en fonction de règles définies par l'utilisateur. On les utilise généralement pour instancier des macros, inclure d'autres fichiers (par opposition à des fonctionnalités de plus haut niveau telles que l'inclusion de modules/paquets/unités/composants) et permettre la compilation ou/et l'inclusion conditionnelle.
  </p>
  <p>
    Le préprocesseur est éxécuté avant la compilation.
  </p>
</article>
<article>
  <h1>Les macros</h1>
  <p>
    Le mécanisme des macros est fréquemment utilisé en C pour définir de petits extraits de code qui seront réutilisés à divers endroits du programme.
    Les langages de programmation plus modernes se passent généralement de méta-programmation par macro-expansion de chaînes de caractères, et utilisent généralement des fonctions/méthodes traditionnelles, recopiées par le compilateur en ligne en fonction d'optimisations automatiques ou guidées. De même, plutôt que d'utiliser des macros pour définir des structures de données, ces langages utilisent souvent du polymorphisme paramétrique (aussi appelé templates, alias méthodes/classes génériques).
  </p>
  <pre class="prettyprint lang-cpp">
      #define test void main(void){}

      test
      /*
      Se transformera en:
      */
      void main(void){}
    </pre>
    <p>
    Ces macros peuvent prendre des "paramètres":</p>
    <pre class="prettyprint lang-cpp">
      #define min(X, Y)  ((X) < (Y) ? (X) : (Y))
      #define max(X, Y)  ((X) > (Y) ? (X) : (Y))
    </pre>
    <p>
    Rajouter # devant permet de transformer ce paramètre en string.</p>
    <pre class="prettyprint lang-cpp">
      #define str(s) #s
      void main(void){
          printf(str(4));
      }
    </pre>
    <p>Devient:</p>
    <pre class="prettyprint lang-cpp">
      void main(void){
          echo("4");
      }
    </pre>
</article>
<article>
  <h1>La compilation conditionelle</h1>
  <p>
    Le préprocesseur C permet aussi la compilation conditionnelle, ce qui permet de disposer de plusieurs versions d'un même programme ou d'un extrait dans un même fichier source. Typiquement, les programmeurs C utilisent cette technique pour pouvoir compiler différemment le programme en fonction de son état d'avancement, de la plateforme de destination, des tests désirés, ou pour s'assurer que les fichiers d'en-tête ne sont inclus qu'une seule fois.
    La majorité des langages de programmation modernes n'utilisent pas cette fonctionnalité et dépendent plutôt d'une utilisation des habituels opérateurs if…then…else…, laissant au compilateur la tâche de supprimer le code inutile.
  </p>
  <p>#if permet d'éffacer ou de laisser le code en fonction d'une condition.</p>
  <pre class="prettyprint lang-cpp">
    #if 0
    void main(void){}
    #else
    bite
    #endif
  </pre>
  <p>Devient.</p>
  <pre class="prettyprint lang-cpp">
    bite
  </pre>
  <p>Eh oui, bien sûr "bite" !</p>
</article>
</div>
